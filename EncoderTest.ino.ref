#include <inttypes.h>

SerialLogHandler logHandler(LOG_LEVEL_ALL);

void funcEncoder();

int _encoderPinA = D2;
int _encoderPinB = D3;
int _state = 0;
bool _trigger = false;

int _encoderValueA = 0;
int _encoderValueB = 0;

float _encoderPercent;

unsigned long _msEncoderDelta = 0;

unsigned long _now;

volatile bool _encoderLastA = false;
volatile bool _encoderLastB = false;
volatile unsigned long _msEncoder;

void setup()
{
    Serial.begin(115200);
    delay(1000);

    // Log some debug info
    Log.info("Starting up...");
    Log.info("System version: %s", System.version().c_str());
    //Log.info("System ID: %s", System.deviceID());
    Log.info("EEPROM Length: %d", EEPROM.length());
    Log.info("Free Memory: %lu", System.freeMemory());
    Log.info("IP: %d.%d.%d.%d", WiFi.localIP()[0], WiFi.localIP()[1], WiFi.localIP()[2], WiFi.localIP()[3]);
    Log.info("Subnet: %d.%d.%d.%d", WiFi.subnetMask()[0], WiFi.subnetMask()[1], WiFi.subnetMask()[2], WiFi.subnetMask()[3]);
    Log.info("Gateway: %d.%d.%d.%d", WiFi.gatewayIP()[0], WiFi.gatewayIP()[1], WiFi.gatewayIP()[2], WiFi.gatewayIP()[3]);
    Log.info("SSID: %s", WiFi.SSID());

    // Pin Modes
    pinMode(_encoderPinA, INPUT);
    pinMode(_encoderPinB, INPUT);
    // Interrupts
    attachInterrupt(_encoderPinA, funcEncoder, CHANGE);
}

void loop() {
     _now = millis();

     if(_trigger)
     {
         Log.info("%4.2f, %lu", _encoderPercent, _msEncoderDelta);
         _trigger = false;
     }

}
//----------------------------------------------------------------
void funcEncoder()
{
    int _incrementor = 0;
    _encoderValueA = digitalRead(_encoderPinA);
    _encoderValueB = digitalRead(_encoderPinB);

    if (_encoderValueA != _encoderLastA)
    {
        int s = _state & 3;
        if (_encoderValueA)
            s |= 4;
        if (_encoderValueB)
            s |= 8;
        switch (s)
        {
        case 0:
        case 5:
        case 10:
        case 15:
            break;
        case 1:
        case 7:
        case 8:
        case 14:
            _incrementor = 2;
            break;
        case 2:
        case 4:
        case 11:
        case 13:
            _incrementor = -2;
            break;
        case 3:
        case 12:
            _incrementor = 1;
            break;
        default:
            _incrementor = -1;
            break;
        }
        _state = (s >> 2);

        if (abs(_incrementor) == 1)
        {
            _msEncoderDelta = millis() - _msEncoder;
            _msEncoderDelta = constrain(_msEncoderDelta, 0, 350);

            _encoderPercent = (1.01 - ((float)_msEncoderDelta / 350.00)) * _incrementor;
            
            _trigger = true;
            _msEncoder = millis();
        }

        _encoderLastA = _encoderValueA;
    }
}
